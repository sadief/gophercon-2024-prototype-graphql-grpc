// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: squish_analytics/v1/squish_analytics.proto

package squish_analyticsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/alpaca_app/03-create-grpc-server/gen/squish_analytics/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SquishAnalyticsServiceName is the fully-qualified name of the SquishAnalyticsService service.
	SquishAnalyticsServiceName = "squish_analytics.v1.SquishAnalyticsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SquishAnalyticsServiceCreateSquishRatingProcedure is the fully-qualified name of the
	// SquishAnalyticsService's CreateSquishRating RPC.
	SquishAnalyticsServiceCreateSquishRatingProcedure = "/squish_analytics.v1.SquishAnalyticsService/CreateSquishRating"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	squishAnalyticsServiceServiceDescriptor                  = v1.File_squish_analytics_v1_squish_analytics_proto.Services().ByName("SquishAnalyticsService")
	squishAnalyticsServiceCreateSquishRatingMethodDescriptor = squishAnalyticsServiceServiceDescriptor.Methods().ByName("CreateSquishRating")
)

// SquishAnalyticsServiceClient is a client for the squish_analytics.v1.SquishAnalyticsService
// service.
type SquishAnalyticsServiceClient interface {
	CreateSquishRating(context.Context, *connect.Request[v1.CreateSquishRatingRequest]) (*connect.Response[v1.CreateSquishRatingResponse], error)
}

// NewSquishAnalyticsServiceClient constructs a client for the
// squish_analytics.v1.SquishAnalyticsService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSquishAnalyticsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SquishAnalyticsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &squishAnalyticsServiceClient{
		createSquishRating: connect.NewClient[v1.CreateSquishRatingRequest, v1.CreateSquishRatingResponse](
			httpClient,
			baseURL+SquishAnalyticsServiceCreateSquishRatingProcedure,
			connect.WithSchema(squishAnalyticsServiceCreateSquishRatingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// squishAnalyticsServiceClient implements SquishAnalyticsServiceClient.
type squishAnalyticsServiceClient struct {
	createSquishRating *connect.Client[v1.CreateSquishRatingRequest, v1.CreateSquishRatingResponse]
}

// CreateSquishRating calls squish_analytics.v1.SquishAnalyticsService.CreateSquishRating.
func (c *squishAnalyticsServiceClient) CreateSquishRating(ctx context.Context, req *connect.Request[v1.CreateSquishRatingRequest]) (*connect.Response[v1.CreateSquishRatingResponse], error) {
	return c.createSquishRating.CallUnary(ctx, req)
}

// SquishAnalyticsServiceHandler is an implementation of the
// squish_analytics.v1.SquishAnalyticsService service.
type SquishAnalyticsServiceHandler interface {
	CreateSquishRating(context.Context, *connect.Request[v1.CreateSquishRatingRequest]) (*connect.Response[v1.CreateSquishRatingResponse], error)
}

// NewSquishAnalyticsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSquishAnalyticsServiceHandler(svc SquishAnalyticsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	squishAnalyticsServiceCreateSquishRatingHandler := connect.NewUnaryHandler(
		SquishAnalyticsServiceCreateSquishRatingProcedure,
		svc.CreateSquishRating,
		connect.WithSchema(squishAnalyticsServiceCreateSquishRatingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/squish_analytics.v1.SquishAnalyticsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SquishAnalyticsServiceCreateSquishRatingProcedure:
			squishAnalyticsServiceCreateSquishRatingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSquishAnalyticsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSquishAnalyticsServiceHandler struct{}

func (UnimplementedSquishAnalyticsServiceHandler) CreateSquishRating(context.Context, *connect.Request[v1.CreateSquishRatingRequest]) (*connect.Response[v1.CreateSquishRatingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("squish_analytics.v1.SquishAnalyticsService.CreateSquishRating is not implemented"))
}
