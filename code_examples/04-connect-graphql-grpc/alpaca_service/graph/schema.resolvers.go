package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"alpaca-app/graph/model"
	"context"
	"fmt"
	"log"
	"net/http"

	squish_analyticsv1connect "buf.build/gen/go/sadiefr/squishapis/connectrpc/go/squish_analytics/v1/squish_analyticsv1connect"
	squish_analytics_v1 "buf.build/gen/go/sadiefr/squishapis/protocolbuffers/go/squish_analytics/v1"
	connect "connectrpc.com/connect"
	"github.com/google/uuid"
)

// CreateAlpaca is the resolver for the createAlpaca field.
func (r *mutationResolver) CreateAlpaca(ctx context.Context, input model.NewAlpaca) (*model.Alpaca, error) {
	log.Printf("Alpaca Name: %v | FaceSquishRating: %v", input.Name, input.FaceSquishRating)

	newAlpaca := &model.Alpaca{
		ID:   uuid.New().String(),
		Name: input.Name,
	}

	log.Printf("New Alpaca Created, ID: %v | Name: %v", newAlpaca.ID, newAlpaca.Name)
	// Save Alpaca to DB

	client := squish_analyticsv1connect.NewSquishAnalyticsServiceClient(
		http.DefaultClient,
		"http://localhost:8000",
	)
	res, err := client.CreateSquishRating(
		context.Background(),

		connect.NewRequest(&squish_analytics_v1.CreateSquishRatingRequest{
			AlpacaId:     newAlpaca.ID,
			SquishRating: fmt.Sprintf("%v", input.FaceSquishRating),
		}),
	)
	if err != nil {
		log.Printf("error calling SquishAnalyticsService")
		return nil, err
	}
	log.Printf("Successfully Created Squish Rating: %v", res.Msg)

	return newAlpaca, nil
}

// Alpacas is the resolver for the alpacas field.
func (r *queryResolver) Alpacas(ctx context.Context) ([]*model.Alpaca, error) {
	panic(fmt.Errorf("not implemented: Alpacas - alpacas"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
